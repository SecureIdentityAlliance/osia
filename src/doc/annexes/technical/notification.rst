
.. _annex-interface-notification:

Notification
------------

This is version :oasversion:`../../yaml/notification.yaml` of this interface.

.. only:: html

    Get the OpenAPI file: `notification.yaml <../../notification.yaml>`_

.. raw:: latex

    Get the OpenAPI file: \textattachfile[]{../html/notification.yaml}{notification.yaml}

.. sidebar:: Notification Services

    .. hlist::
        :columns: 2

        - `create_topic <#post--v1-topics>`_
        - `list_topics <#get--v1-topics>`_
        - `delete_topic <#delete--v1-topics-uuid>`_
        - `publish <#post--v1-topics-uuid-publish>`_
        - `subscribe <#post--v1-subscriptions>`_
        - `list_subscription <#get--v1-subscriptions>`_
        - `unsubscribe <#delete--v1-subscriptions-uuid>`_
        - `confirm <#get--v1-subscriptions-confirm>`_
        - :ref:`notify <notify_URL>`

Services
""""""""

.. openapi:: ../../yaml/notification.yaml
    :examples:
    :group:

Receiver
''''''''
.. _notify_URL:

.. http:post:: notify_URL
    :synopsis: Notify service receiving the events

    :reqheader message-type: the type of the message (Required)
    :reqheader subscription-id: the unique ID of the subscription
    :reqheader message-id: the unique ID of the message (Required)
    :reqheader topic-id: the unique ID of the topic (Required)
    :status 200: Message received and processed.
    :status 500: Unexpected error

**Example request (Subscription Confirmation):**

.. sourcecode:: http

    POST notify_URL HTTP/1.1
    Host: example.com
    Content-Type: application/json
    Message-Type: SubscriptionConfirmation
    Subscription-Id: XXX
    Message-Id: YYY
    Topic-ID: ZZZ

    {
        "type": "SubscriptionConfirmation",
        "token": "string",
        "topic": "string",
        "message": "string",
        "messageId": "string",
        "subject": "string",
        "confirmURL": "https://example.com",
        "timestamp": "string"
    }

**Example request (Event):**

.. sourcecode:: http

    POST notify_URL HTTP/1.1
    Host: example.com
    Content-Type: application/json
    Message-Type: Notification
    Message-Id: YYY
    Topic-ID: ZZZ

    {"key": "data"}

**Example response:**

.. sourcecode:: http

    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json

    {
        "code": 1,
        "message": "string"
    }


Notification Message
""""""""""""""""""""

This section describes the messages exchanged through notification. All messages
are encoded in ``json``. They are generated by the emitter (the source of the event)
and received by zero, one, or many receivers that have subscribed to the type of event.

.. list-table:: Event Type & Message
    :header-rows: 1
    :widths: 30 70
    :class: longtable
    
    * - Event Type
      - Message
      
    * - ``liveBirth``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born
        - ``uin1`` of the first parent (optional if parent is unknown)
        - ``uin2`` of the second parent (optional if parent is unknown)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``death``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the dead person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``birthCancellation``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person whose birth declaration is being cancelled

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
            }

    * - ``foetalDeath``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the new born

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``marriage``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``divorce``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``annulment``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``separation``
      - - ``source``: identification of the system emitting the event
        - ``uin1`` of the first conjoint
        - ``uin2`` of the second conjoint

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``adoption``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin1": "234567890"
            }
            
    * - ``legitimation``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "987654321",
                "uin1": "123456789",
                "uin2": "234567890"
            }
            
    * - ``recognition``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the child
        - ``uin1`` of the first parent
        - ``uin2`` of the second parent (optional)

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "uin2": "234567890"
            }
            
    * - ``changeOfName``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``changeOfGender``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``updatePerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }
            
    * - ``newPerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789"
            }

    * - ``duplicatePerson``
      - - ``source``: identification of the system emitting the event
        - ``uin`` of the person to be kept
        - ``duplicates``: list of uin for records identified as duplicates

        Example:

        .. code-block:: json

            {
                "source": "systemX",
                "uin": "123456789",
                "duplicates": [
                    "234567890",
                    "345678901"
                ]
            }
            
.. note::

    Anonymized notification of events will be treated separately.


